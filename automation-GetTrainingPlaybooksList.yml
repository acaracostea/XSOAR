comment: Dynamic section which shows the playbooks from the Training Pack on the Training
  layout.
commonfields:
  id: GetTrainingPlaybooksList
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.8.0
    itemVersion: 1.0.0
    packID: XSOAR_Engineer_Training
    packName: XSOAR Engineer Training
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.10.48392
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetTrainingPlaybooksList
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GetTrainingPlaybooksList', 'start', __line__())


  result = demisto.executeCommand("demisto-api-post", {"uri":"/playbook/search","body":{"query":"tags:training"}})[0]["Contents"]["response"]
  playbooks = [ {"Name":x.get("name",""),"Description":x.get("comment","")} for x in result["playbooks"] if "XSOAR Engineer Training" in x.get("name")]

  # make the playbook clickable.
  data = []
  for playbook in playbooks:
      name = playbook.get("Name")
      fancy = {
          'Command': f'%%%{{"message":"{name}", "action":"setPlaybook", "params": {{"name":"{name}"}}}}%%%',
          'Description': playbook.get("Description")
      }
      data.append(fancy)

  # return a MD entry for the dynamic section
  results = CommandResults(readable_output=tableToMarkdown('Training Playbooks', data, headers=["Command","Description"]))
  return_results(results)

  register_module_line('GetTrainingPlaybooksList', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
- xet
type: python
