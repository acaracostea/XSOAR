args:
- description: Email address of the user to lookup in Active Directory.
  name: email
  required: true
comment: Lookup a User and their Manager in Active Directory
commonfields:
  id: ADGetUserAndManager
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.8.0
    itemVersion: 1.0.0
    packID: XSOAR_Engineer_Training
    packName: XSOAR Engineer Training
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - Active Directory Query v2|||ad-get-user
dockerimage: demisto/python3:3.10.10.48392
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ADGetUserAndManager
outputs:
- contextPath: ADUserAndManager.UserName
  description: The Display Name of the User
- contextPath: ADUserAndManager.UserEmail
  description: The Email of the User
- contextPath: ADUserAndManager.UserGroups
  description: AD Groups of the User
- contextPath: ADUserAndManager.UserSamAccountName
  description: The samAccountName of the User
- contextPath: ADUserAndManager.ManagerName
  description: The Display Name of the Users Manager
- contextPath: ADUserAndManager.ManagerEmail
  description: The Email of the Users Manager
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ADGetUserAndManager', 'start', __line__())


  # Retrieves a command / script arguments dict, and then we can "get" the argument from that dict
  email = demisto.args().get("email")

  # get the user details, using the email argument
  user = demisto.executeCommand("ad-get-user", {"email": email})

  # get the rawjson Contents of the executeCommand, so we can utilize it within our script.
  user = user[0].get("Contents")

  # get the manager details, using the DN of the Manager, since that's what we have!
  # then grab the Contents key from the response, so we can utilize it within our script.
  manager = demisto.executeCommand("ad-get-user", {"dn": user.get("attributes").get("manager")[0]})[0]["Contents"]

  # create our own "Contents" to be returned by this automation.
  result = {
      "UserName": user.get('attributes').get('displayName')[0],
      "UserEmail": user.get('attributes').get('mail')[0],
      "UserGroups": user.get('attributes').get('memberOf'),
      "UserSamAccountName": user.get('attributes').get('sAMAccountName')[0],
      "ManagerName": manager.get('attributes').get('displayName')[0],
      "ManagerEmail": manager.get('attributes').get('mail')[0]
  }

  # table to markdown creates a slick markdown war room entry with a dictionary or a list of the same dictionaries,
  readable = tableToMarkdown("Active Directory User and Manager Details", result, headers=[
                             "UserName", "UserEmail", "UserGroups", "UserSamAccountName", "ManagerName", "ManagerEmail"])

  # command results creates the object for return_results
  # readable_output = human readable markdown that will be used for the war room entry
  # outputs_prefix = The Context Key that our results will be placed under in context
  # outputs_key_field = The key in the result that will be used to determine if the existing item already exists in Context, if so it will update.
  # outputs = The raw data, in this case the "result" dict from above.
  # ignore_auto_extract = When set to True, disables auto-extract on the results from this command. (Default is False)

  results = CommandResults(
      readable_output=readable,
      outputs_prefix='ADUserAndManager',
      outputs_key_field="UserName",
      outputs=result,
      ignore_auto_extract=True
  )

  return_results(results)

  register_module_line('ADGetUserAndManager', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- training
- incident-action-button
type: python
