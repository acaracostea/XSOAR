comment: Preprocessing script that checks if an Incident exists with the incoming
  Event ID, and drops it with only a war room entry.  Basically the same as drop and
  update, but without incrementing the dropped count field
commonfields:
  id: PreProcessEventID
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.8.0
    itemVersion: 1.0.0
    packID: XSOAR_Engineer_Training
    packName: XSOAR Engineer Training
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.10.48392
enabled: true
engineinfo: {}
mainengineinfo: {}
name: PreProcessEventID
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('PreProcessEventID', 'start', __line__())


  from datetime import datetime, timedelta

  # Times
  now = datetime.now()
  end = now.strftime("%Y-%m-%dT%H:%M:%SZ")
  start = datetime.strftime((now - timedelta(hours=3)), "%Y-%m-%dT%H:%M:%SZ")

  # get incident data, and the event ID
  incident = demisto.incident()
  eventid = incident.get('CustomFields').get('eventid')
  incident_type = incident.get('type')

  # check to see if we have duplicates

  # Debugging - Run this script in an Incident war room to test
  # LOG("STARTING SEARCH")
  # LOG(f"QUERY IS: eventid:{eventid} fromdate:{start} todate:{end}")
  # LOG.print_log(verbose=True)

  # find Incident with the same eventid, from now to 3 hours back
  sameIncidents = demisto.executeCommand("getIncidents",
                                         {"query": f"type:{incident_type} and eventid:{eventid} and -category:job", "fromdate": start, "todate": end})

  # create Incident by default, if another Incident is found, we'll return False to not create it.
  res = True
  if not isError(sameIncidents[0]):
      # if found sameIncidents found, add an entry to the war room, and drop this one
      sameIncidentsCount = sameIncidents[0]['Contents']['total']
      if sameIncidentsCount > 0:
          res = False
          otherIncidents = sameIncidents[0]['Contents']['data']
          entries = [{"Contents": f"Duplicate {incident_type} incident dropped from preprocessing: {incident.get('name')}"}]
          demisto.executeCommand("addEntries", {"id": otherIncidents[0]["id"], "entries": json.dumps(entries)})

  demisto.results(res)

  register_module_line('PreProcessEventID', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- preProcessing
- training
type: python
