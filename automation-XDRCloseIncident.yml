comment: Post processing script to resolve and close XDR Incidents if the XSOAR Incident
  is closed.
commonfields:
  id: XDRCloseIncident
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.8.0
    itemVersion: 1.0.0
    packID: XSOAR_Engineer_Training
    packName: XSOAR Engineer Training
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python:2.7.18.49010
enabled: true
engineinfo: {}
mainengineinfo: {}
name: XDRCloseIncident
pswd: ""
runas: Administrator
runonce: false
script: |
  register_module_line('XDRCloseIncident', 'start', __line__())


  # get the close notes & reason from the XSOAR Incident
  close_reason = demisto.args().get("closeReason", "Resolved")
  close_notes = demisto.args().get("closeNotes", "No close notes provided")

  # get the xdr incident id
  xdrincidentid = demisto.incident().get("CustomFields", {}).get("xdrincidentid", False)

  # map XSOAR close reasons to XDR close codes
  close_code_map = {
      "False Positive": "RESOLVED_FALSE_POSITIVE",
      "Resolved": "RESOLVED_THREAT_HANDLED",
      "Other": "RESOLVED_OTHER",
      "Duplicate": "RESOLVED_DUPLICATE"
  }

  if xdrincidentid:
      demisto.results(demisto.executeCommand("xdr-update-incident",
                      {"incident_id": xdrincidentid, "status": close_code_map.get(close_reason), "resolve_comment": close_notes}))

  else:
      demisto.results("No XDR Incident ID found, doing nothing...")

  register_module_line('XDRCloseIncident', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- post-processing
- training
timeout: 80ns
type: python
