comment: 'Excludes private IP ranges as IP indicators: 10.0.0.0/8, 172.16.0.0/12,
  192.168.0.0/16 as part of the XSOAR Engineer Training Pack.'
commonfields:
  id: TrainingExcludePrivateCIDRsButton
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.8.0
    itemVersion: 1.0.0
    packID: XSOAR_Engineer_Training
    packName: XSOAR Engineer Training
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - '|||demisto-api-get'
dockerimage: demisto/python3:3.10.10.48392
enabled: true
engineinfo: {}
mainengineinfo: {}
name: TrainingExcludePrivateCIDRsButton
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('TrainingExcludePrivateCIDRsButton', 'start', __line__())


  # check to see if they already exist, so you can't run it more than once
  results = demisto.executeCommand("demisto-api-get", {"uri": "/indicators/whitelisted"})[0]["Contents"]["response"]

  if results:
      current_whitelist = [{"type": x["reputations"], "value":x["value"]} for x in results]
      current_whitelist_names = [x["value"] for x in results]
  else:
      current_whitelist = []
      current_whitelist_names = []
  required_type = "IP"
  values = ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]

  created = []
  for value in values:
      if value not in current_whitelist_names:
          demisto.results(demisto.executeCommand("excludeIndicators", {
                          "indicatorsValues": value, "indicatorsTypes": "IP", "reason": "excluded by XSOAR Engineer Training Pack"}))
          created.append(value)
      if value in current_whitelist_names:
          # check if its the IP indicator:
          for current in current_whitelist:
              if current["value"] == value and required_type not in current["type"]:
                  demisto.results(demisto.executeCommand("excludeIndicators", {
                                  "indicatorsValues": value, "indicatorsTypes": "IP", "reason": "excluded by XSOAR Engineer Training Pack"}))
                  created.append(value)

  if created:
      demisto.results(f"Created following exclusions: {created}")
  else:
      demisto.results("The required exclusions already exist")

  register_module_line('TrainingExcludePrivateCIDRsButton', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- incident-action-button
- xet
type: python
